{
    "id": 2034509196736,
    "blocks": [
        {
            "id": 2034638878464,
            "title": "",
            "block_type": "MarkdownBlock",
            "splitter_pos": [
                0,
                206
            ],
            "position": [
                126.71874999999943,
                -276.99999999999966
            ],
            "width": 677,
            "height": 253,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [],
            "text": "# Linear regressions\r\n\r\nThe example showcases how a graph notebook can be used to teach\r\nhow linear regressions work."
        },
        {
            "id": 2034686482320,
            "title": "Show the data",
            "block_type": "CodeBlock",
            "splitter_pos": [
                0,
                278
            ],
            "position": [
                -424.40624999999943,
                438.49999999999994
            ],
            "width": 439,
            "height": 325,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034686483184,
                    "type": "input",
                    "position": [
                        219.5,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034686483328,
                    "type": "output",
                    "position": [
                        219.5,
                        325.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "source": "import matplotlib.pyplot as plt\r\n\r\num = 10 * m\r\nub = 2 * b\r\nuy = [um*i+ub for i in x]\r\n\r\nplt.plot(x,uy)\r\nplt.scatter(x,y)",
            "stdout": "<img>\n"
        },
        {
            "id": 2034723533728,
            "title": "Generate some data to plot",
            "block_type": "CodeBlock",
            "splitter_pos": [
                193,
                87
            ],
            "position": [
                121.03124999999955,
                29.078125
            ],
            "width": 706,
            "height": 327,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034723534592,
                    "type": "input",
                    "position": [
                        353.0,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034723534736,
                    "type": "output",
                    "position": [
                        353.0,
                        327.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "source": "from random import seed, random\r\n\r\nseed(132)\r\nx = [3 + random() * 10 for i in range(40)]\r\ny = [4.15 * i + random() * 2 for i in x]\r\n\r\nprint(f\"Generated {len(x)} examples\")",
            "stdout": "Generated 40 examples\n"
        },
        {
            "id": 2034723677808,
            "title": "Slider",
            "block_type": "SliderBlock",
            "splitter_pos": [],
            "position": [
                -632.03125,
                203.81250000000028
            ],
            "width": 618,
            "height": 184,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034723678672,
                    "type": "input",
                    "position": [
                        309.0,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034723678816,
                    "type": "output",
                    "position": [
                        309.0,
                        184.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "value": "0.82",
            "var_name": "b"
        },
        {
            "id": 2034723714816,
            "title": "Slider",
            "block_type": "SliderBlock",
            "splitter_pos": [],
            "position": [
                -592.9062499999998,
                -27.109374999999375
            ],
            "width": 618,
            "height": 184,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034723715680,
                    "type": "input",
                    "position": [
                        309.0,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034723715824,
                    "type": "output",
                    "position": [
                        309.0,
                        184.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "value": "0.41",
            "var_name": "m"
        },
        {
            "id": 2034879162976,
            "title": "Regression",
            "block_type": "CodeBlock",
            "splitter_pos": [
                0,
                282
            ],
            "position": [
                232.51562500000023,
                813.7656249999991
            ],
            "width": 434,
            "height": 329,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034879163840,
                    "type": "input",
                    "position": [
                        217.0,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034879163984,
                    "type": "output",
                    "position": [
                        217.0,
                        329.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "source": "import matplotlib.pyplot as plt\r\nmy = reg.predict([[i] for i in x])\r\nprint(my)\r\nplt.plot(x,my)\r\nplt.scatter(x,y)",
            "stdout": "<img>\n"
        },
        {
            "id": 2034879286288,
            "title": "Show user input",
            "block_type": "CodeBlock",
            "splitter_pos": [
                0,
                226
            ],
            "position": [
                -547.0624999999991,
                842.5156249999998
            ],
            "width": 685,
            "height": 273,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034879287152,
                    "type": "input",
                    "position": [
                        342.5,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034879197248,
                    "type": "output",
                    "position": [
                        342.5,
                        273.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "source": "print(\"Your manual regression: \")\r\nprint(f\"y = x * {um} + {ub}\")\r\n\r\nprint(\"Accuracy:\")\r\nu = sum([(y[i] - (x[i]*um+ub)) ** 2 for i in range(len(x))])\r\ny_mean = sum(y) / len(y)\r\nv = sum([(y_i - y_mean) ** 2 for y_i in y])\r\nprint(1 - u/v)\r\n",
            "stdout": "Your manual regression: \ny = x * 3.9000000000000004 + 1.64\nAccuracy:\n0.9724161281048267\n"
        },
        {
            "id": 2034886210608,
            "title": "Create a new linear model",
            "block_type": "CodeBlock",
            "splitter_pos": [
                93,
                88
            ],
            "position": [
                68.203125,
                428.2343749999996
            ],
            "width": 840,
            "height": 228,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2034886211472,
                    "type": "input",
                    "position": [
                        420.0,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2034886211616,
                    "type": "output",
                    "position": [
                        420.0,
                        228.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "source": "from sklearn import linear_model\r\nreg = linear_model.LinearRegression()\r\nreg.fit([[i] for i in x],y)",
            "stdout": "LinearRegression()"
        },
        {
            "id": 2136886539168,
            "title": "Show user input",
            "block_type": "CodeBlock",
            "splitter_pos": [
                0,
                284
            ],
            "position": [
                708.8281250000007,
                810.0624999999995
            ],
            "width": 816,
            "height": 331,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10
                }
            },
            "sockets": [
                {
                    "id": 2136886540752,
                    "type": "input",
                    "position": [
                        408.0,
                        0.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                },
                {
                    "id": 2136886540896,
                    "type": "output",
                    "position": [
                        408.0,
                        331.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 10.0
                    }
                }
            ],
            "source": "print(\"Automatic regression: \")\r\nprint(f\"y = x * {reg.coef_[0]} + {reg.predict([[0]])[0]}\")\r\n\r\nprint(\"Accuracy: (closer to 1 = better)\")\r\nprint(reg.score([[i] for i in x],y))",
            "stdout": "Automatic regression: \ny = x * 4.171128552280276 + 0.8246691322815138\nAccuracy: (closer to 1 = better)\n0.9977264063505547\n"
        }
    ],
    "edges": [
        {
            "id": 2034686599952,
            "path_type": "bezier",
            "source": {
                "block": 2034723533728,
                "socket": 2034723534736
            },
            "destination": {
                "block": 2034686482320,
                "socket": 2034686483184
            }
        },
        {
            "id": 2034879160672,
            "path_type": "bezier",
            "source": {
                "block": 2034723714816,
                "socket": 2034723715824
            },
            "destination": {
                "block": 2034686482320,
                "socket": 2034686483184
            }
        },
        {
            "id": 2034879161104,
            "path_type": "bezier",
            "source": {
                "block": 2034723677808,
                "socket": 2034723678816
            },
            "destination": {
                "block": 2034686482320,
                "socket": 2034686483184
            }
        },
        {
            "id": 2034882738640,
            "path_type": "bezier",
            "source": {
                "block": 2034723533728,
                "socket": 2034723534736
            },
            "destination": {
                "block": 2034886210608,
                "socket": 2034886211472
            }
        },
        {
            "id": 2034882739360,
            "path_type": "bezier",
            "source": {
                "block": 2034886210608,
                "socket": 2034886211616
            },
            "destination": {
                "block": 2034879162976,
                "socket": 2034879163840
            }
        },
        {
            "id": 2034884170944,
            "path_type": "bezier",
            "source": {
                "block": 2034686482320,
                "socket": 2034686483328
            },
            "destination": {
                "block": 2034879286288,
                "socket": 2034879287152
            }
        },
        {
            "id": 2136887093136,
            "path_type": "bezier",
            "source": {
                "block": 2034886210608,
                "socket": 2034886211616
            },
            "destination": {
                "block": 2136886539168,
                "socket": 2136886540752
            }
        }
    ]
}