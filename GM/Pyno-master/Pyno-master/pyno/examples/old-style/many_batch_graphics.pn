[{'code': "S['quads'] = []\nS['batch'] = None\n\ndef quad(window=None, xx=[], yy=[], width=10):\n  count = len(xx) * len(yy)\n  need_update = len(S['quads']) != count\n  if need_update:\n    S['quads'] = []\n    S['batch'] = pyglet.graphics.Batch()\n    for x in xx:\n      for y in yy:\n        S['quads'].append(S['batch'].add_indexed(4, \n                          pyglet.gl.GL_TRIANGLES,\n                          None, [0, 1, 2, 0, 2, 3],\n                          ('v2f', (0,0, 0,0, 0,0, 0,0)),\n                          ('c3B', (y // 2, x // 2, 150) * 4)))\n\n  window.switch_to()\n  window.clear()\n  c = 0\n  for x in xx:\n    for y in yy:\n      S['quads'][c].vertices = (x,         y,\n                                x + width, y,\n                                x + width, y + width,\n                                x,         y + width)\n      c += 1\n\n  S['batch'].draw()\n\n  return need_update, count", 'parent': 31, 'color': (99, 114, 116), 'connects': [{'output': {'node': 46, 'put': {'name': "S['window']"}}, 'input': {'put': {'name': 'window'}}}, {'output': {'node': 39, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'xx'}}}, {'output': {'node': 39, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'yy'}}}, {'output': {'node': 32, 'put': {'name': 'cos'}}, 'input': {'put': {'name': 'width'}}}], 'y': 190, 'x': 401, 'type': 'node', 'size': (601, 566)}, {'code': 'def sincos(a=0, m=1):\n  cos = math.cos(a)*m\n  return cos', 'parent': 32, 'color': (80, 123, 85), 'connects': [{'output': {'node': 33, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'm'}}}, {'output': {'node': 36, 'put': {'name': 'result'}}, 'input': {'put': {'name': 'a'}}}], 'y': 332, 'x': 671, 'type': 'node', 'size': (300, 150)}, {'code': '14', 'parent': 33, 'connects': [], 'y': 416, 'x': 736, 'type': 'field', 'size': (70, 30)}, {'code': "S['t'] = 0\n\ndef time():\n  S['t'] += G['dt']\n  return S['t']", 'parent': 34, 'color': (124, 125, 123), 'connects': [], 'y': 482, 'x': 578, 'type': 'node', 'size': (300, 150)}, {'code': '\n#There is example of some heavy graphics\n\nimport pyglet\nimport math\n', 'parent': 35, 'connects': [], 'y': 521, 'x': 221, 'type': 'field', 'size': (414, 124)}, {'code': 'def mul(a=0, b=1):\n    result = a * b\n    return result', 'parent': 36, 'color': (84, 85, 94), 'connects': [{'output': {'node': 34, 'put': {'name': "S['t']"}}, 'input': {'put': {'name': 'a'}}}, {'output': {'node': 37, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'b'}}}], 'y': 407, 'x': 623, 'type': 'node', 'size': (300, 150)}, {'code': '3.0\n', 'parent': 37, 'connects': [], 'y': 482, 'x': 664, 'type': 'field', 'size': (81, 30)}, {'code': 'def rangef(f=0, t=100, s=10):\n  result = list(range(f,t,s))\n  return result', 'parent': 39, 'color': (117, 90, 80), 'connects': [{'output': {'node': 41, 'put': {'name': 'output'}}, 'input': {'put': {'name': 't'}}}, {'output': {'node': 42, 'put': {'name': 'output'}}, 'input': {'put': {'name': 's'}}}, {'output': {'node': 40, 'put': {'name': 'output'}}, 'input': {'put': {'name': 'f'}}}], 'y': 292, 'x': 401, 'type': 'node', 'size': (342, 151)}, {'code': '45', 'parent': 40, 'connects': [], 'y': 394, 'x': 304, 'type': 'field', 'size': (70, 30)}, {'code': '520', 'parent': 41, 'connects': [], 'y': 393, 'x': 401, 'type': 'field', 'size': (81, 30)}, {'code': '15', 'parent': 42, 'connects': [], 'y': 393, 'x': 501, 'type': 'field', 'size': (70, 30)}, {'code': 'False', 'parent': 44, 'connects': [{'output': {'node': 31, 'put': {'name': 'need_update'}}, 'input': {'put': {'name': 'input'}}}], 'y': 92, 'x': 369, 'type': 'field', 'size': (100, 30)}, {'code': '1024', 'parent': 45, 'connects': [{'output': {'node': 31, 'put': {'name': 'count'}}, 'input': {'put': {'name': 'input'}}}], 'y': 91, 'x': 501, 'type': 'field', 'size': (70, 30)}, {'code': "# make config for anti-aliasing\n\nS['config']=pyglet.gl.Config(samples=1)\nS['window']=pyglet.window.Window(540,540,\n                                 config=S['config'])\n\ndef window():\n  return S['window']", 'parent': 46, 'color': (101, 103, 106), 'connects': [], 'y': 297, 'x': 250, 'type': 'node', 'size': (572, 274)}]