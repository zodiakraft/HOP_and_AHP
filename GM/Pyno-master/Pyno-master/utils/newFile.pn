[
    {
        "code": "import pyglet",
        "type": "field",
        "size": [
            180,
            30
        ],
        "connects": [],
        "x": 103,
        "y": 368,
        "parent": 32
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nS['box'] = pyglet.graphics.vertex_list_indexed(\n      4, [0, 1, 2, 0, 2, 3],\n      ('v2i', (0, 0, 10, 0, 10, 10, 0, 10)),\n      ('c3B', (255,255,255)*4) )\n\ndef draw_rect(pos=(0,0), size=(10,10)) -> Tuple[\"S['box']\"] :\n  x, y = int(pos[0]),  int(pos[1])\n  w, h = int(size[0]), int(size[1])\n  S['box'].vertices = (x,     y,\n                       x + w, y,\n                       x + w, y + h,\n                       x,     y + h)\n  return S['box']\n\ncall = draw_rect",
        "type": "node",
        "size": [
            473,
            316
        ],
        "connects": [
            {
                "output": {
                    "node": 37,
                    "put": {
                        "name": "S['size']"
                    }
                },
                "input": {
                    "put": {
                        "name": "size"
                    }
                }
            },
            {
                "output": {
                    "node": 37,
                    "put": {
                        "name": "S['position']"
                    }
                },
                "input": {
                    "put": {
                        "name": "pos"
                    }
                }
            }
        ],
        "x": 509,
        "y": 96,
        "color": [
            99,
            114,
            116
        ],
        "parent": 33
    },
    {
        "code": "'''\nLittle ping-pong game\nKeys:\n    upper pad:\n        A    D\n    bottom pad:\n        LEFT RIGHT\n'''",
        "type": "field",
        "size": [
            256,
            169
        ],
        "connects": [],
        "x": 139,
        "y": 504,
        "parent": 34
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nG['key'] = []\n\ndef keyboard(window=0) -> Tuple[\"G['key']\"] :\n\n  @window.event\n  def on_key_press(symbol, mod):\n    G['key'].append(symbol)\n\n  @window.event\n  def on_key_release(symbol, mod):\n    if symbol in G['key']:\n      G['key'].pop(G['key'].index(symbol))\n\n  @window.event\n  def on_deactivate():\n    G['key'] = []\n\n  return G['key']\n\ncall = keyboard",
        "type": "node",
        "size": [
            408,
            395
        ],
        "connects": [
            {
                "output": {
                    "node": 39,
                    "put": {
                        "name": "G['window']"
                    }
                },
                "input": {
                    "put": {
                        "name": "window"
                    }
                }
            }
        ],
        "x": 482,
        "y": 459,
        "color": [
            93,
            93,
            89
        ],
        "parent": 35
    },
    {
        "code": "[]",
        "type": "field",
        "size": [
            110,
            118
        ],
        "connects": [
            {
                "output": {
                    "node": 42,
                    "put": {
                        "name": "keys"
                    }
                },
                "input": {
                    "put": {
                        "name": "input"
                    }
                }
            }
        ],
        "x": 184,
        "y": 223,
        "parent": 36
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nw = G['window']\nS['size'] = [70, 10]\nS['position'] = [w.width/2 - S['size'][0]/2, 20]\n\ndef pad_bottom(key=[]) -> Tuple[\"S['position']\", \"S['size']\", \"S\"] :\n  speed = G['dt'] * 200\n\n  if 'RIGHT' in key:\n    if S['position'][0] < w.width - S['size'][0]:\n      S['position'][0] += speed\n  if 'LEFT' in key:\n    if S['position'][0] > 0:\n      S['position'][0] -= speed\n  return S['position'], S['size'], S\n\ncall = pad_bottom",
        "type": "node",
        "size": [
            477,
            301
        ],
        "connects": [
            {
                "output": {
                    "node": 42,
                    "put": {
                        "name": "keys"
                    }
                },
                "input": {
                    "put": {
                        "name": "key"
                    }
                }
            }
        ],
        "x": 526,
        "y": 280,
        "color": [
            101,
            91,
            127
        ],
        "parent": 37
    },
    {
        "code": "import pyglet\nfrom typing import *\n\ndef render(meshes=None):\n  window = G['window']\n  window.switch_to()\n  window.clear()\n  for mesh in meshes:\n    mesh.draw(pyglet.gl.GL_TRIANGLES)\n  \n\ncall = render",
        "type": "node",
        "size": [
            376,
            172
        ],
        "connects": [
            {
                "output": {
                    "node": 46,
                    "put": {
                        "name": "result"
                    }
                },
                "input": {
                    "put": {
                        "name": "meshes"
                    }
                }
            }
        ],
        "x": 509,
        "y": -83,
        "color": [
            127,
            96,
            112
        ],
        "parent": 38
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nG['window'] = pyglet.window.Window(300, 450)\n\ndef create_window() -> Tuple[\"G['window']\"] :\n  return G['window']\n\ncall = create_window",
        "type": "node",
        "size": [
            433,
            162
        ],
        "connects": [],
        "x": 439,
        "y": 545,
        "color": [
            129,
            105,
            124
        ],
        "parent": 39
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nw = G['window']\nS['size'] = [70, 10]\nS['position'] = [w.width/2 - S['size'][0]/2, w.height - 30]\n\ndef pad_upper(key=[]) -> Tuple[\"S['position']\", \"S['size']\", \"S\"] :\n  speed = G['dt'] * 200\n\n  if 'D' in key:\n    if S['position'][0] < w.width - S['size'][0]:\n      S['position'][0] += speed\n  if 'A' in key:\n    if S['position'][0] > 0:\n      S['position'][0] -= speed\n  return S['position'], S['size'], S\n\ncall = pad_upper",
        "type": "node",
        "size": [
            560,
            279
        ],
        "connects": [
            {
                "output": {
                    "node": 42,
                    "put": {
                        "name": "keys"
                    }
                },
                "input": {
                    "put": {
                        "name": "key"
                    }
                }
            }
        ],
        "x": 371,
        "y": 278,
        "color": [
            101,
            91,
            127
        ],
        "parent": 41
    },
    {
        "code": "import pyglet\nfrom typing import *\n\ndef keys_to_names(keys=[]) -> Tuple[\"keys\"] :\n  keys = list(map(lambda x: pyglet.window.key.symbol_string(x), keys))\n  return keys\n\ncall = keys_to_names",
        "type": "node",
        "size": [
            715,
            151
        ],
        "connects": [
            {
                "output": {
                    "node": 35,
                    "put": {
                        "name": "G['key']"
                    }
                },
                "input": {
                    "put": {
                        "name": "keys"
                    }
                }
            }
        ],
        "x": 453,
        "y": 375,
        "color": [
            81,
            121,
            111
        ],
        "parent": 42
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nw = G['window']\nS['position'] = [w.width // 2, w.height // 2]\nS['size'] = [10, 10]\nS['acc'] = [2, 1]\n\ndef ball(pad_u={}, pad_b={}) -> Tuple[\"S['position']\", \"S['size']\"] :\n  speed = G['dt'] * 60\n  pos = S['position']\n\n  # OUT OF GAME\n  if (pos[1] > w.height) or (pos[1] < -S['size'][0]):\n    S['position'] = [w.width // 2, w.height // 2]\n    S['acc'][1] *= -1\n\n  # WALLS COLLISION\n  if pos[0] < w.width - S['size'][0]:\n    S['acc'][0] *= -1\n  if pos[0] > 0:\n    S['acc'][0] *= -1\n\n  # PADS COLLISION  \n  pu, su = pad_u['position'], pad_u['size']\n  if ((pu[1] > pos[1] > pu[1] - su[1]) and\n      (pu[0] < pos[0] < pu[0] + su[0])):\n    S['acc'][1] *= -1\n\n  pu, su = pad_b['position'], pad_b['size']\n  if ((pu[1] < pos[1] < pu[1] + su[1]) and\n      (pu[0] < pos[0] < pu[0] + su[0])):\n    S['acc'][1] *= -1\n\n  # MOVEMENT\n  S['position'][0] += S['acc'][0] * speed\n  S['position'][1] += S['acc'][1] * speed\n\n  return S['position'], S['size']\n\ncall = ball",
        "type": "node",
        "size": [
            562,
            680
        ],
        "connects": [
            {
                "output": {
                    "node": 41,
                    "put": {
                        "name": "S"
                    }
                },
                "input": {
                    "put": {
                        "name": "pad_u"
                    }
                }
            },
            {
                "output": {
                    "node": 37,
                    "put": {
                        "name": "S"
                    }
                },
                "input": {
                    "put": {
                        "name": "pad_b"
                    }
                }
            }
        ],
        "x": 654,
        "y": 170,
        "color": [
            101,
            91,
            127
        ],
        "parent": 44
    },
    {
        "code": "import pyglet\nfrom typing import *\n\ndef join3(a=None, b=None, c=None) -> Tuple[\"result\"] :\n  result = a, b, c\n  return result\n\ncall = join3",
        "type": "node",
        "size": [
            336,
            150
        ],
        "connects": [
            {
                "output": {
                    "node": 33,
                    "put": {
                        "name": "S['box']"
                    }
                },
                "input": {
                    "put": {
                        "name": "b"
                    }
                }
            },
            {
                "output": {
                    "node": 51,
                    "put": {
                        "name": "S['box']"
                    }
                },
                "input": {
                    "put": {
                        "name": "a"
                    }
                }
            },
            {
                "output": {
                    "node": 52,
                    "put": {
                        "name": "S['box']"
                    }
                },
                "input": {
                    "put": {
                        "name": "c"
                    }
                }
            }
        ],
        "x": 509,
        "y": -4,
        "color": [
            81,
            90,
            127
        ],
        "parent": 46
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nS['box'] = pyglet.graphics.vertex_list_indexed(\n      4, [0, 1, 2, 0, 2, 3],\n      ('v2i', (0, 0, 10, 0, 10, 10, 0, 10)),\n      ('c3B', (255,255,255)*4) )\n\ndef draw_rect(pos=(0,0), size=(10,10)) -> Tuple[\"S['box']\"] :\n  x, y = int(pos[0]),  int(pos[1])\n  w, h = int(size[0]), int(size[1])\n  S['box'].vertices = (x,     y,\n                       x + w, y,\n                       x + w, y + h,\n                       x,     y + h)\n  return S['box']\n\ncall = draw_rect",
        "type": "node",
        "size": [
            473,
            316
        ],
        "connects": [
            {
                "output": {
                    "node": 41,
                    "put": {
                        "name": "S['size']"
                    }
                },
                "input": {
                    "put": {
                        "name": "size"
                    }
                }
            },
            {
                "output": {
                    "node": 41,
                    "put": {
                        "name": "S['position']"
                    }
                },
                "input": {
                    "put": {
                        "name": "pos"
                    }
                }
            }
        ],
        "x": 376,
        "y": 96,
        "color": [
            99,
            114,
            116
        ],
        "parent": 51
    },
    {
        "code": "import pyglet\nfrom typing import *\n\nS['box'] = pyglet.graphics.vertex_list_indexed(\n      4, [0, 1, 2, 0, 2, 3],\n      ('v2i', (0, 0, 10, 0, 10, 10, 0, 10)),\n      ('c3B', (255,100,20)*4) )\n\ndef draw_rect(pos=(0,0), size=(10,10)) -> Tuple[\"S['box']\"] :\n  x, y = int(pos[0]),  int(pos[1])\n  w, h = int(size[0]), int(size[1])\n  S['box'].vertices = (x,     y,\n                       x + w, y,\n                       x + w, y + h,\n                       x,     y + h)\n  return S['box']\n\ncall = draw_rect",
        "type": "node",
        "size": [
            473,
            316
        ],
        "connects": [
            {
                "output": {
                    "node": 44,
                    "put": {
                        "name": "S['position']"
                    }
                },
                "input": {
                    "put": {
                        "name": "pos"
                    }
                }
            },
            {
                "output": {
                    "node": 44,
                    "put": {
                        "name": "S['size']"
                    }
                },
                "input": {
                    "put": {
                        "name": "size"
                    }
                }
            }
        ],
        "x": 653,
        "y": 95,
        "color": [
            99,
            114,
            116
        ],
        "parent": 52
    }
]
